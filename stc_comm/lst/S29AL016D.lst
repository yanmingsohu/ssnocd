C51 COMPILER V9.01   S29AL016D                                                             06/30/2017 15:43:36 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE S29AL016D
OBJECT MODULE PLACED IN .\out\S29AL016D.obj
COMPILER INVOKED BY: C:\Programs86\Keil\C51\BIN\C51.EXE S29AL016D.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND CO
                    -DE PRINT(.\lst\S29AL016D.lst) OBJECT(.\out\S29AL016D.obj)

line level    source

   1          #include <reg51.h>
   2          #include "type.h"
   3          #include "flash_chip.h"
   4          
   5          /*
   6          S29AL016D Flash 连接 STC90: 
   7              *[A] = 全部引脚,由低到高
   8              *{N} = 非控制引脚
   9          
  10          A0-A7        A8-A15      A16-A19        A-1/DQ15
  11          P0[A]        P1[A]       P3.[2 3 4 5]   P3.6
  12          
  13          DQ0-DQ7      CE#         OE#            WE#
  14          P2[A]        P4.4        P4.5           P4.6
  15          
  16          RESET#       RY/BY#      BYTE#
  17          {0->1}       P3.7        {0}(8bit)
  18          */
  19          sfr   F_ADD1    = 0x80;
  20          sfr   F_ADD2    = 0x90;
  21          sfr   F_ADD3    = 0xB0;
  22          sbit  F_ADD3_0  = P3 ^ 2;
  23          sbit  F_ADD3_1  = P3 ^ 3;
  24          sbit  F_ADD3_2  = P3 ^ 4;
  25          sbit  F_ADD3_3  = P3 ^ 5;
  26          sbit  F_ADD3_4  = P3 ^ 6;
  27          sfr   F_DAT     = 0xA0;
  28          sbit  F_CE      = P4 ^ 4;
  29          sbit  F_OE      = P4 ^ 5;
  30          sbit  F_WE      = P4 ^ 6;
  31          sbit  F_READY   = P3 ^ 7;
  32          
  33          #define READY 1
  34          #define BUSY 0
  35          
  36          
  37          static void f_setadder(pAddress a) {
  38   1          F_ADD1 = a->a8.m0;
  39   1          F_ADD2 = a->a8.m8;
  40   1          F_ADD3 = a->a8.m16;
  41   1      }
  42          
  43          
  44          static BYTE f_read(pAddress a) {
  45   1          while (F_READY == BUSY);
  46   1          f_setadder(a);
  47   1          F_WE = 1;
  48   1          F_CE = 0;
  49   1          F_OE = 0;
  50   1          return F_DAT;
  51   1      }
  52          
  53          
  54          static void f_write(pAddress a, BYTE dat) {
C51 COMPILER V9.01   S29AL016D                                                             06/30/2017 15:43:36 PAGE 2   

  55   1          while (F_READY == BUSY);  
  56   1          f_setadder(a);
  57   1          F_CE = 0;
  58   1          F_OE = 1;
  59   1          F_WE = 0;
  60   1          F_DAT = dat;
  61   1      }
  62          
  63          
  64          void s29al016d(pFlashChip f) {
  65   1              f->write = f_write;
  66   1              f->read = f_read;
  67   1              f->mem_size = 0x200000;
  68   1      }
C51 COMPILER V9.01   S29AL016D                                                             06/30/2017 15:43:36 PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0009 (BEGIN)
0000         L?0010:
0000         L?0011:
0000 900000      R     MOV     DPTR,#f
0003 E0                MOVX    A,@DPTR
0004 FB                MOV     R3,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FA                MOV     R2,A
0008 A3                INC     DPTR
0009 E0                MOVX    A,@DPTR
000A F9                MOV     R1,A
000B 22                RET     
             ; FUNCTION Com0009 (END)

             ; FUNCTION _f_setadder (BEGIN)
                                           ; SOURCE LINE # 37
;---- Variable 'a' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 38
0000 900003            MOV     DPTR,#03H
0003 120000      E     LCALL   ?C?CLDOPTR
0006 F580              MOV     F_ADD1,A
                                           ; SOURCE LINE # 39
0008 900002            MOV     DPTR,#02H
000B 120000      E     LCALL   ?C?CLDOPTR
000E F590              MOV     F_ADD2,A
                                           ; SOURCE LINE # 40
0010 900001            MOV     DPTR,#01H
0013 120000      E     LCALL   ?C?CLDOPTR
0016 F5B0              MOV     F_ADD3,A
                                           ; SOURCE LINE # 41
0018 22                RET     
             ; FUNCTION _f_setadder (END)

             ; FUNCTION _f_read (BEGIN)
                                           ; SOURCE LINE # 44
;---- Variable 'a' assigned to Register 'R1/R2/R3' ----
0000         ?C0002:
                                           ; SOURCE LINE # 45
0000 30B7FD            JNB     F_READY,?C0002
0003         ?C0003:
                                           ; SOURCE LINE # 46
0003 120000      R     LCALL   _f_setadder
                                           ; SOURCE LINE # 47
0006 D2EE              SETB    F_WE
                                           ; SOURCE LINE # 48
0008 C2EC              CLR     F_CE
                                           ; SOURCE LINE # 49
000A C2ED              CLR     F_OE
                                           ; SOURCE LINE # 50
000C AFA0              MOV     R7,F_DAT
                                           ; SOURCE LINE # 51
000E         ?C0004:
000E 22                RET     
             ; FUNCTION _f_read (END)

             ; FUNCTION _f_write (BEGIN)
                                           ; SOURCE LINE # 54
;---- Variable 'dat' assigned to Register 'R5' ----
C51 COMPILER V9.01   S29AL016D                                                             06/30/2017 15:43:36 PAGE 4   

;---- Variable 'a' assigned to Register 'R1/R2/R3' ----
0000         ?C0005:
                                           ; SOURCE LINE # 55
0000 30B7FD            JNB     F_READY,?C0005
0003         ?C0006:
                                           ; SOURCE LINE # 56
0003 120000      R     LCALL   _f_setadder
                                           ; SOURCE LINE # 57
0006 C2EC              CLR     F_CE
                                           ; SOURCE LINE # 58
0008 D2ED              SETB    F_OE
                                           ; SOURCE LINE # 59
000A C2EE              CLR     F_WE
                                           ; SOURCE LINE # 60
000C AF05              MOV     R7,AR5
000E 8FA0              MOV     F_DAT,R7
                                           ; SOURCE LINE # 61
0010 22                RET     
             ; FUNCTION _f_write (END)

             ; FUNCTION _s29al016d (BEGIN)
                                           ; SOURCE LINE # 64
0000 900000      R     MOV     DPTR,#f
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
000B 7BFF              MOV     R3,#0FFH
000D 7A00        R     MOV     R2,#HIGH _f_write
000F 7900        R     MOV     R1,#LOW _f_write
0011 C003              PUSH    AR3
0013 C002              PUSH    AR2
0015 C001              PUSH    AR1
0017 120000      R     LCALL   L?0010
001A 900003            MOV     DPTR,#03H
001D 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 66
0020 7BFF              MOV     R3,#0FFH
0022 7A00        R     MOV     R2,#HIGH _f_read
0024 7900        R     MOV     R1,#LOW _f_read
0026 C003              PUSH    AR3
0028 C002              PUSH    AR2
002A C001              PUSH    AR1
002C 120000      R     LCALL   L?0010
002F 120000      E     LCALL   ?C?PSTPTR
                                           ; SOURCE LINE # 67
0032 120000      R     LCALL   L?0011
0035 90000D            MOV     DPTR,#0DH
0038 120000      E     LCALL   ?C?LSTKOPTR
003B 00                DB      00H
003C 20                DB      020H
003D 00                DB      00H
003E 00                DB      00H
                                           ; SOURCE LINE # 68
003F 22                RET     
             ; FUNCTION _s29al016d (END)

C51 COMPILER V9.01   S29AL016D                                                             06/30/2017 15:43:36 PAGE 5   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    133    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
