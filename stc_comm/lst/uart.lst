C51 COMPILER V9.01   UART                                                                  07/01/2017 15:24:15 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\out\uart.obj
COMPILER INVOKED BY: C:\Programs86\Keil\C51\BIN\C51.EXE uart.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND CODE PR
                    -INT(.\lst\uart.lst) OBJECT(.\out\uart.obj)

line level    source

   1          #include "uart.h"
   2          //#include "../pc_comm/comm_rate.h"
   3          
   4          // STC 主频，晶振的频率/刷机软件显示的时钟频率
   5          // 24009194  11059743
   6          #define STC_CLK   24009194L
   7          #define BAUD      115200
   8          
   9          // STC PCON 寄存器 最高位 (0,1)
  10          #define STC_SMOD  0
  11          
  12          static int T12 = 12;
  13          static int T6  = 6;
  14          
  15          // sbit bit9 = P2^2;           //P2.2 show UART data bit9
  16          // sbit SMOD = PCON ^ 7; don't do this!
  17          
  18          static bit busy;
  19          static BYTE recv_buff[UART_BUFF_SIZE];
  20          static BYTE buff_point = 0; 
  21          
  22          
  23          void init_uart() {
  24   1              int temp;
  25   1      
  26   1      #if (PARITYBIT == NONE_PARITY)
                  SCON = 0x50;            //8-bit variable UART
              #elif (PARITYBIT == ODD_PARITY) || (PARITYBIT == EVEN_PARITY) || (PARITYBIT == MARK_PARITY)
  29   1          SCON = 0xda;            //9-bit variable UART, parity bit initial to 1
  30   1      #elif (PARITYBIT == SPACE_PARITY)
                  SCON = 0xd2;            //9-bit variable UART, parity bit initial to 0
              #endif
  33   1      
  34   1          TMOD = 0x20;            //Set Timer1 as 8-bit auto reload mode
  35   1          //PCON |= (STC_SMOD << 7);
  36   1      
  37   1              // 不同的主频会有不同的串口速度，PC端跟随变动
  38   1          //TH1 = TL1 = -(STC_CLK/6/32/BAUD);
  39   1              temp = -(STC_CLK/6/32/BAUD);
  40   1              TH1 = (temp & 0xFF00) >> 8;
  41   1              TL1 = temp & 0xFF;
  42   1      
  43   1          TR1 = 1;                //Timer1 start run
  44   1          ES = 1;                 //Enable UART interrupt
  45   1          EA = 1;                 //Open master interrupt switch
  46   1      }
  47          
  48          /*----------------------------
  49          UART interrupt service routine
  50          ----------------------------*/
  51          void Uart_Isr() interrupt 4 using 1
  52          {
  53   1          if (RI)
  54   1          {
C51 COMPILER V9.01   UART                                                                  07/01/2017 15:24:15 PAGE 2   

  55   2              RI = 0;             //Clear receive interrupt flag
  56   2              //(*recv_func)(SBUF, RB8);
  57   2                      if (buff_point >= UART_BUFF_SIZE) 
  58   2                              --buff_point;
  59   2                      recv_buff[buff_point++] = SBUF;
  60   2          }
  61   1          if (TI)
  62   1          {
  63   2              TI = 0;             //Clear transmit interrupt flag
  64   2              busy = 0;           //Clear transmit busy flag
  65   2          }
  66   1      }
  67          
  68          BYTE ReadData() {
  69   1              while (!buff_point);
  70   1              return recv_buff[--buff_point];
  71   1      }
  72          
  73          /*----------------------------
  74          Send a byte data to UART
  75          Input: dat (data to be sent)
  76          Output:None
  77          ----------------------------*/
  78          void SendData(BYTE dat)
  79          {
  80   1          while (busy);           //Wait for the completion of the previous data is sent
  81   1          ACC = dat;              //Calculate the even parity bit P (PSW.0)
  82   1          if (P)                  //Set the parity bit according to P
  83   1          {
  84   2      #if (PARITYBIT == ODD_PARITY)
                      TB8 = 0;            //Set parity bit to 0
              #elif (PARITYBIT == EVEN_PARITY)
  87   2              TB8 = 1;            //Set parity bit to 1
  88   2      #endif
  89   2          }
  90   1          else
  91   1          {
  92   2      #if (PARITYBIT == ODD_PARITY)
                      TB8 = 1;            //Set parity bit to 1
              #elif (PARITYBIT == EVEN_PARITY)
  95   2              TB8 = 0;            //Set parity bit to 0
  96   2      #endif
  97   2          }
  98   1          busy = 1;
  99   1          SBUF = ACC;             //Send data to UART buffer
 100   1      }
 101          
 102          /*----------------------------
 103          Send a string to UART
 104          Input: s (address of string)
 105          Output:None
 106          ----------------------------*/
 107          void SendString(char *s)
 108          {
 109   1          while (*s)              //Check the end of the string
 110   1          {
 111   2              SendData(*s++);     //Send current char and increment string ptr
 112   2          }
 113   1      }
C51 COMPILER V9.01   UART                                                                  07/01/2017 15:24:15 PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION init_uart (BEGIN)
                                           ; SOURCE LINE # 23
                                           ; SOURCE LINE # 29
0000 7598DA            MOV     SCON,#0DAH
                                           ; SOURCE LINE # 34
0003 758920            MOV     TMOD,#020H
                                           ; SOURCE LINE # 39
;---- Variable 'temp' assigned to Register 'R4/R5' ----
0006 74FF              MOV     A,#0FFH
                                           ; SOURCE LINE # 40
0008 F58D              MOV     TH1,A
                                           ; SOURCE LINE # 41
000A F58B              MOV     TL1,A
                                           ; SOURCE LINE # 43
000C D28E              SETB    TR1
                                           ; SOURCE LINE # 44
000E D2AC              SETB    ES
                                           ; SOURCE LINE # 45
0010 D2AF              SETB    EA
                                           ; SOURCE LINE # 46
0012 22                RET     
             ; FUNCTION init_uart (END)

             ; FUNCTION Uart_Isr (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C0D0              PUSH    PSW
0008 75D008            MOV     PSW,#08H
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 53
000B 309822            JNB     RI,?C0002
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
000E C298              CLR     RI
                                           ; SOURCE LINE # 57
0010 900000      R     MOV     DPTR,#buff_point
0013 E0                MOVX    A,@DPTR
0014 C3                CLR     C
0015 9420              SUBB    A,#020H
0017 4003              JC      ?C0003
                                           ; SOURCE LINE # 58
0019 E0                MOVX    A,@DPTR
001A 14                DEC     A
001B F0                MOVX    @DPTR,A
001C         ?C0003:
                                           ; SOURCE LINE # 59
001C 900000      R     MOV     DPTR,#buff_point
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 04                INC     A
0022 F0                MOVX    @DPTR,A
0023 7400        R     MOV     A,#LOW recv_buff
0025 2F                ADD     A,R7
0026 F582              MOV     DPL,A
0028 E4                CLR     A
0029 3400        R     ADDC    A,#HIGH recv_buff
002B F583              MOV     DPH,A
002D E599              MOV     A,SBUF
C51 COMPILER V9.01   UART                                                                  07/01/2017 15:24:15 PAGE 4   

002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 60
0030         ?C0002:
                                           ; SOURCE LINE # 61
0030 309904            JNB     TI,?C0005
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
0033 C299              CLR     TI
                                           ; SOURCE LINE # 64
0035 C200        R     CLR     busy
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 66
0037         ?C0005:
0037 D0D0              POP     PSW
0039 D082              POP     DPL
003B D083              POP     DPH
003D D0E0              POP     ACC
003F 32                RETI    
             ; FUNCTION Uart_Isr (END)

             ; FUNCTION ReadData (BEGIN)
                                           ; SOURCE LINE # 68
0000         ?C0006:
                                           ; SOURCE LINE # 69
0000 900000      R     MOV     DPTR,#buff_point
0003 E0                MOVX    A,@DPTR
0004 60FA              JZ      ?C0006
0006         ?C0007:
                                           ; SOURCE LINE # 70
0006 900000      R     MOV     DPTR,#buff_point
0009 E0                MOVX    A,@DPTR
000A 14                DEC     A
000B F0                MOVX    @DPTR,A
000C 2400        R     ADD     A,#LOW recv_buff
000E F582              MOV     DPL,A
0010 E4                CLR     A
0011 3400        R     ADDC    A,#HIGH recv_buff
0013 F583              MOV     DPH,A
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
                                           ; SOURCE LINE # 71
0017         ?C0008:
0017 22                RET     
             ; FUNCTION ReadData (END)

             ; FUNCTION _SendData (BEGIN)
                                           ; SOURCE LINE # 78
;---- Variable 'dat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 79
0000         ?C0009:
                                           ; SOURCE LINE # 80
0000 2000FD      R     JB      busy,?C0009
0003         ?C0010:
                                           ; SOURCE LINE # 81
0003 EF                MOV     A,R7
                                           ; SOURCE LINE # 82
0004 30D004            JNB     P,?C0011
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 87
0007 D29B              SETB    TB8
                                           ; SOURCE LINE # 89
0009 8002              SJMP    ?C0012
C51 COMPILER V9.01   UART                                                                  07/01/2017 15:24:15 PAGE 5   

000B         ?C0011:
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 95
000B C29B              CLR     TB8
                                           ; SOURCE LINE # 97
000D         ?C0012:
                                           ; SOURCE LINE # 98
000D D200        R     SETB    busy
                                           ; SOURCE LINE # 99
000F F599              MOV     SBUF,A
                                           ; SOURCE LINE # 100
0011 22                RET     
             ; FUNCTION _SendData (END)

             ; FUNCTION _SendString (BEGIN)
                                           ; SOURCE LINE # 107
0000 900000      R     MOV     DPTR,#s
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
000B         ?C0014:
                                           ; SOURCE LINE # 109
000B 900000      R     MOV     DPTR,#s
000E E0                MOVX    A,@DPTR
000F FB                MOV     R3,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FA                MOV     R2,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 F9                MOV     R1,A
0016 120000      E     LCALL   ?C?CLDPTR
0019 6017              JZ      ?C0016
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
001B 900000      R     MOV     DPTR,#s
001E A3                INC     DPTR
001F E4                CLR     A
0020 75F001            MOV     B,#01H
0023 120000      E     LCALL   ?C?ILDIX
0026 A9F0              MOV     R1,B
0028 FA                MOV     R2,A
0029 120000      E     LCALL   ?C?CLDPTR
002C FF                MOV     R7,A
002D 120000      R     LCALL   _SendData
                                           ; SOURCE LINE # 112
0030 80D9              SJMP    ?C0014
                                           ; SOURCE LINE # 113
0032         ?C0016:
0032 22                RET     
             ; FUNCTION _SendString (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    176    ----
C51 COMPILER V9.01   UART                                                                  07/01/2017 15:24:15 PAGE 6   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     37       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
