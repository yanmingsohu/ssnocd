C51 COMPILER V9.01   AT24C64                                                               06/30/2017 15:43:36 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE AT24C64
OBJECT MODULE PLACED IN .\out\at24c64.obj
COMPILER INVOKED BY: C:\Programs86\Keil\C51\BIN\C51.EXE at24c64.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND CODE
                    - PRINT(.\lst\at24c64.lst) OBJECT(.\out\at24c64.obj)

line level    source

   1          #include <reg51.h>
   2          #include "type.h"
   3          #include "flash_chip.h"
   4          
   5          /*
   6          AT24C64 连接
   7              A0 A1 A2 = 0       
   8              WA           = 0
   9              SDA          = p2.1 
  10              SCL          = P2.0
  11                  * p0 口是个强上拉，rom没法拉低电压
  12          */
  13          sbit SDA = P4 ^ 5;
  14          sbit SCL = P3 ^ 7;
  15          
  16          // 主机读总线
  17          #define I2C_R           1
  18          // 主机写总线
  19          #define I2C_W           0
  20          
  21          #define DEV_ADDR(X,Y)   (0xA0 | ((X->a8.m16 & 0x07) << 1) | Y)
  22          
  23          /* ---------------------------------------------------------- i2c ---- */
  24          
  25          static void i2c_dly(void)
  26          {
  27   1      //      int i=0;
  28   1      //      for (i=300; i>=0; --i);
  29   1      //      ++i;
  30   1      //      ++i;
  31   1      }
  32          
  33          
  34          static void i2c_start(void)
  35          {
  36   1        SDA = 1;             // i2c start bit sequence
  37   1        i2c_dly();
  38   1        SCL = 1;
  39   1        i2c_dly();
  40   1        SDA = 0;
  41   1        i2c_dly();
  42   1        SCL = 0;
  43   1        i2c_dly();
  44   1      }
  45          
  46          
  47          static void i2c_stop(void)
  48          {
  49   1        SDA = 0;             // i2c stop bit sequence
  50   1        i2c_dly();
  51   1        SCL = 1;
  52   1        i2c_dly();
  53   1        SDA = 1;
  54   1        i2c_dly();
C51 COMPILER V9.01   AT24C64                                                               06/30/2017 15:43:36 PAGE 2   

  55   1      }
  56          
  57          
  58          static unsigned char i2c_rx(char ack)
  59          {
  60   1        char x, d=0;
  61   1      
  62   1        SDA = 1; 
  63   1        for(x=0; x<8; x++) {
  64   2          d <<= 1;
  65   2          do {
  66   3            SCL = 1;
  67   3          } while(SCL==0);    // wait for any SCL clock stretching
  68   2      
  69   2          i2c_dly();
  70   2          if(SDA) d |= 1;
  71   2          SCL = 0;
  72   2        } 
  73   1        if(ack) SDA = 0;
  74   1        else SDA = 1;
  75   1      
  76   1        SCL = 1;
  77   1        i2c_dly();             // send (N)ACK bit
  78   1        SCL = 0;
  79   1        SDA = 1;
  80   1        return d;
  81   1      }
  82          
  83          
  84          static bit i2c_tx(unsigned char d)
  85          {
  86   1      char x;
  87   1      static bit b;
  88   1      
  89   1        for(x=8; x; x--) {
  90   2          if(d&0x80) SDA = 1;
  91   2          else SDA = 0;
  92   2          SCL = 1;
  93   2          d <<= 1;
  94   2          SCL = 0;
  95   2        }
  96   1      
  97   1        SDA = 1;
  98   1        SCL = 1;
  99   1        i2c_dly();
 100   1        b = SDA;          // possible ACK bit
 101   1        SCL = 0;
 102   1        return b;
 103   1      }
 104          
 105          /* ------------------------------------------------------ i2c end ---- */
 106          
 107          
 108          static void wait_for_wirte(pAddress a) {
 109   1              bit r = 1;
 110   1              do {
 111   2                      i2c_start();            
 112   2                      r = i2c_tx(DEV_ADDR(a, I2C_W));       
 113   2              } while (r);
 114   1      }
 115          
 116          static void _write(pAddress a, BYTE dat) {
C51 COMPILER V9.01   AT24C64                                                               06/30/2017 15:43:36 PAGE 3   

 117   1              i2c_start();            
 118   1              i2c_tx(DEV_ADDR(a, I2C_W));        
 119   1              i2c_tx(a->a8.m8);            
 120   1              i2c_tx(a->a8.m0);           
 121   1              i2c_tx(dat);            
 122   1              i2c_stop();               
 123   1              wait_for_wirte(a);
 124   1      }
 125          
 126          
 127          static BYTE _read(pAddress a) {
 128   1              BYTE rec;
 129   1      
 130   1              i2c_start();              
 131   1              i2c_tx(DEV_ADDR(a, I2C_W));            
 132   1              i2c_tx(a->a8.m8);            
 133   1              i2c_tx(a->a8.m0);            
 134   1      
 135   1              i2c_start();             
 136   1              i2c_tx(DEV_ADDR(a, I2C_R)); 
 137   1              rec = i2c_rx(0);    
 138   1              i2c_stop();           
 139   1      
 140   1              return rec;
 141   1      }
 142          
 143                
 144          static void _init() {
 145   1              SDA = 1;
 146   1              SCL = 1;
 147   1      }
 148          
 149          
 150          void at24c64a(pFlashChip f) {
 151   1              f->read  = _read;
 152   1              f->write = _write;
 153   1              f->init  = _init;
 154   1              f->mem_size = 0x2000;
 155   1      }
C51 COMPILER V9.01   AT24C64                                                               06/30/2017 15:43:36 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com001D (BEGIN)
0000         L?0030:
0000         L?0031:
0000 900000      R     MOV     DPTR,#f
0003 E0                MOVX    A,@DPTR
0004 FB                MOV     R3,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FA                MOV     R2,A
0008 A3                INC     DPTR
0009 E0                MOVX    A,@DPTR
000A F9                MOV     R1,A
000B 22                RET     
000C         L?0032:
000C 120000      R     LCALL   i2c_start
000F 900001            MOV     DPTR,#01H
0012 120000      E     LCALL   ?C?CLDOPTR
0015 5407              ANL     A,#07H
0017 25E0              ADD     A,ACC
0019 22                RET     
             ; FUNCTION Com001D (END)

             ; FUNCTION i2c_dly (BEGIN)
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
                                           ; SOURCE LINE # 31
0000 22                RET     
             ; FUNCTION i2c_dly (END)

             ; FUNCTION i2c_start (BEGIN)
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
0000 D2ED              SETB    SDA
                                           ; SOURCE LINE # 37
0002 120000      R     LCALL   i2c_dly
                                           ; SOURCE LINE # 38
0005 D2B7              SETB    SCL
                                           ; SOURCE LINE # 39
0007 120000      R     LCALL   i2c_dly
                                           ; SOURCE LINE # 40
000A C2ED              CLR     SDA
                                           ; SOURCE LINE # 41
000C 120000      R     LCALL   i2c_dly
                                           ; SOURCE LINE # 42
000F C2B7              CLR     SCL
                                           ; SOURCE LINE # 43
0011 020000      R     LJMP    i2c_dly
             ; FUNCTION i2c_start (END)

             ; FUNCTION i2c_stop (BEGIN)
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
0000 C2ED              CLR     SDA
                                           ; SOURCE LINE # 50
0002 120000      R     LCALL   i2c_dly
                                           ; SOURCE LINE # 51
0005 D2B7              SETB    SCL
C51 COMPILER V9.01   AT24C64                                                               06/30/2017 15:43:36 PAGE 5   

                                           ; SOURCE LINE # 52
0007 120000      R     LCALL   i2c_dly
                                           ; SOURCE LINE # 53
000A D2ED              SETB    SDA
                                           ; SOURCE LINE # 54
000C 020000      R     LJMP    i2c_dly
             ; FUNCTION i2c_stop (END)

             ; FUNCTION _i2c_rx (BEGIN)
                                           ; SOURCE LINE # 58
;---- Variable 'ack' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
;---- Variable 'd' assigned to Register 'R6' ----
0000 E4                CLR     A
0001 FE                MOV     R6,A
                                           ; SOURCE LINE # 62
0002 D2ED              SETB    SDA
                                           ; SOURCE LINE # 63
;---- Variable 'x' assigned to Register 'R5' ----
0004 FD                MOV     R5,A
0005         ?C0004:
                                           ; SOURCE LINE # 64
0005 EE                MOV     A,R6
0006 25E0              ADD     A,ACC
0008 FE                MOV     R6,A
0009         ?C0009:
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 66
0009 D2B7              SETB    SCL
                                           ; SOURCE LINE # 67
000B 30B7FB            JNB     SCL,?C0009
                                           ; SOURCE LINE # 69
000E 120000      R     LCALL   i2c_dly
                                           ; SOURCE LINE # 70
0011 30ED04            JNB     SDA,?C0010
0014 EE                MOV     A,R6
0015 4401              ORL     A,#01H
0017 FE                MOV     R6,A
0018         ?C0010:
                                           ; SOURCE LINE # 71
0018 C2B7              CLR     SCL
                                           ; SOURCE LINE # 72
001A 0D                INC     R5
001B ED                MOV     A,R5
001C B408E6            CJNE    A,#08H,?C0004
001F         ?C0005:
                                           ; SOURCE LINE # 73
001F EF                MOV     A,R7
0020 6004              JZ      ?C0011
0022 C2ED              CLR     SDA
0024 8002              SJMP    ?C0012
0026         ?C0011:
                                           ; SOURCE LINE # 74
0026 D2ED              SETB    SDA
0028         ?C0012:
                                           ; SOURCE LINE # 76
0028 D2B7              SETB    SCL
                                           ; SOURCE LINE # 77
002A 120000      R     LCALL   i2c_dly
                                           ; SOURCE LINE # 78
002D C2B7              CLR     SCL
C51 COMPILER V9.01   AT24C64                                                               06/30/2017 15:43:36 PAGE 6   

                                           ; SOURCE LINE # 79
002F D2ED              SETB    SDA
                                           ; SOURCE LINE # 80
0031 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 81
0033         ?C0013:
0033 22                RET     
             ; FUNCTION _i2c_rx (END)

             ; FUNCTION L?0028 (BEGIN)
0000 120000      R     LCALL   i2c_start
0003 900001            MOV     DPTR,#01H
0006 120000      E     LCALL   ?C?CLDOPTR
0009 5407              ANL     A,#07H
000B 25E0              ADD     A,ACC
000D 44A0              ORL     A,#0A0H
000F FF                MOV     R7,A
0010 120000      R     LCALL   _i2c_tx
0013 900002            MOV     DPTR,#02H
0016 120000      E     LCALL   ?C?CLDOPTR
0019 FF                MOV     R7,A
001A 120000      R     LCALL   _i2c_tx
001D 900003            MOV     DPTR,#03H
0020 120000      E     LCALL   ?C?CLDOPTR
0023 FF                MOV     R7,A
             ; FUNCTION _i2c_tx (BEGIN)
                                           ; SOURCE LINE # 84
;---- Variable 'd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 89
;---- Variable 'x' assigned to Register 'R6' ----
0024 7E08              MOV     R6,#08H
0026         ?C0014:
                                           ; SOURCE LINE # 90
0026 EF                MOV     A,R7
0027 30E704            JNB     ACC.7,?C0017
002A D2ED              SETB    SDA
002C 8002              SJMP    ?C0018
002E         ?C0017:
                                           ; SOURCE LINE # 91
002E C2ED              CLR     SDA
0030         ?C0018:
                                           ; SOURCE LINE # 92
0030 D2B7              SETB    SCL
                                           ; SOURCE LINE # 93
0032 EF                MOV     A,R7
0033 25E0              ADD     A,ACC
0035 FF                MOV     R7,A
                                           ; SOURCE LINE # 94
0036 C2B7              CLR     SCL
                                           ; SOURCE LINE # 95
0038 DEEC              DJNZ    R6,?C0014
003A         ?C0015:
                                           ; SOURCE LINE # 97
003A D2ED              SETB    SDA
                                           ; SOURCE LINE # 98
003C D2B7              SETB    SCL
                                           ; SOURCE LINE # 99
003E 120000      R     LCALL   i2c_dly
                                           ; SOURCE LINE # 100
0041 A2ED              MOV     C,SDA
0043 9200        R     MOV     b,C
C51 COMPILER V9.01   AT24C64                                                               06/30/2017 15:43:36 PAGE 7   

                                           ; SOURCE LINE # 101
0045 C2B7              CLR     SCL
                                           ; SOURCE LINE # 102
0047 A200        R     MOV     C,b
                                           ; SOURCE LINE # 103
0049         ?C0019:
0049 22                RET     
             ; FUNCTION _i2c_tx (END)

             ; FUNCTION _wait_for_wirte (BEGIN)
                                           ; SOURCE LINE # 108
;---- Variable 'a' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 109
0000 D200        R     SETB    r
0002         ?C0022:
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
0002 120000      R     LCALL   L?0032
0005 44A0              ORL     A,#0A0H
0007 FF                MOV     R7,A
0008 120000      R     LCALL   _i2c_tx
000B 9200        R     MOV     r,C
                                           ; SOURCE LINE # 113
000D 2000F2      R     JB      r,?C0022
                                           ; SOURCE LINE # 114
0010 22                RET     
             ; FUNCTION _wait_for_wirte (END)

             ; FUNCTION __write (BEGIN)
                                           ; SOURCE LINE # 116
;---- Variable 'a' assigned to Register 'R1/R2/R3' ----
;---- Variable 'dat' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
0000 120000      R     LCALL   L?0028
                                           ; SOURCE LINE # 121
0003 AF05              MOV     R7,AR5
0005 120000      R     LCALL   _i2c_tx
                                           ; SOURCE LINE # 122
0008 120000      R     LCALL   i2c_stop
                                           ; SOURCE LINE # 123
000B 020000      R     LJMP    _wait_for_wirte
             ; FUNCTION __write (END)

             ; FUNCTION __read (BEGIN)
                                           ; SOURCE LINE # 127
;---- Variable 'a' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
0000 120000      R     LCALL   L?0028
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
0003 120000      R     LCALL   L?0032
0006 44A1              ORL     A,#0A1H
0008 FF                MOV     R7,A
0009 120000      R     LCALL   _i2c_tx
                                           ; SOURCE LINE # 137
C51 COMPILER V9.01   AT24C64                                                               06/30/2017 15:43:36 PAGE 8   

000C E4                CLR     A
000D FF                MOV     R7,A
000E 120000      R     LCALL   _i2c_rx
;---- Variable 'rec' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 138
0011 120000      R     LCALL   i2c_stop
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
0014         ?C0025:
0014 22                RET     
             ; FUNCTION __read (END)

             ; FUNCTION _init (BEGIN)
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
0000 D2ED              SETB    SDA
                                           ; SOURCE LINE # 146
0002 D2B7              SETB    SCL
                                           ; SOURCE LINE # 147
0004 22                RET     
             ; FUNCTION _init (END)

             ; FUNCTION _at24c64a (BEGIN)
                                           ; SOURCE LINE # 150
0000 900000      R     MOV     DPTR,#f
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
000B 7BFF              MOV     R3,#0FFH
000D 7A00        R     MOV     R2,#HIGH __read
000F 7900        R     MOV     R1,#LOW __read
0011 C003              PUSH    AR3
0013 C002              PUSH    AR2
0015 C001              PUSH    AR1
0017 120000      R     LCALL   L?0030
001A 120000      E     LCALL   ?C?PSTPTR
                                           ; SOURCE LINE # 152
001D 7BFF              MOV     R3,#0FFH
001F 7A00        R     MOV     R2,#HIGH __write
0021 7900        R     MOV     R1,#LOW __write
0023 C003              PUSH    AR3
0025 C002              PUSH    AR2
0027 C001              PUSH    AR1
0029 120000      R     LCALL   L?0030
002C 900003            MOV     DPTR,#03H
002F 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 153
0032 7BFF              MOV     R3,#0FFH
0034 7A00        R     MOV     R2,#HIGH _init
0036 7900        R     MOV     R1,#LOW _init
0038 C003              PUSH    AR3
003A C002              PUSH    AR2
003C C001              PUSH    AR1
003E 120000      R     LCALL   L?0031
0041 900006            MOV     DPTR,#06H
0044 120000      E     LCALL   ?C?PSTOPTR
C51 COMPILER V9.01   AT24C64                                                               06/30/2017 15:43:36 PAGE 9   

                                           ; SOURCE LINE # 154
0047 120000      R     LCALL   L?0031
004A 90000D            MOV     DPTR,#0DH
004D 120000      E     LCALL   ?C?LSTKOPTR
0050 00                DB      00H
0051 00                DB      00H
0052 20                DB      020H
0053 00                DB      00H
                                           ; SOURCE LINE # 155
0054 22                RET     
             ; FUNCTION _at24c64a (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    330    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
