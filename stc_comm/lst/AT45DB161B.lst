C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE AT45DB161B
OBJECT MODULE PLACED IN .\out\AT45DB161B.obj
COMPILER INVOKED BY: C:\Programs86\Keil\C51\BIN\C51.EXE AT45DB161B.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND C
                    -ODE PRINT(.\lst\AT45DB161B.lst) OBJECT(.\out\AT45DB161B.obj)

line level    source

   1          /*******************************************************************************/    
   2          /* 正常操作电压为2.7~3.6V，实验中发现当电压超过4.25V后读出的状态字节为9A（正常 */    
   3          /* 的状态字节值为9D），并且读写数据均不准确，所以应当保证卡片的供电电压不超过  */    
   4          /* 4.25V。                                                                     */    
   5          /* SPI规范：Data is always clocked into the device on the rising edge of SCK a-  
   6          /*    nd clocked out of the device on the falling edge of SCK.All instruction-  
   7          /*    s,addresses and data are transferred with the most significant bit(MSB)   
   8          /*    first.                                                                    
   9          /*                                                                  2005-06-02  
  10          / ******************************************************************************/    
  11          
  12          #include <reg51.h>
  13          #include "type.h"
  14          #include "flash_chip.h"
  15          
  16          #define DONT_CARE   0x00
  17          #define BEGIN_SPI       SPI_SCK = 0; SPI_CS = 0
  18          #define OVER_SPI        SPI_CS = 1
  19          
  20          sbit        SPI_SCK         = P3 ^ 6;   //串行时钟   
  21          sbit        SPI_SO          = P4 ^ 6;   //串行输出   
  22          sbit        SPI_SI          = P4 ^ 4;   //串行输入   
  23          sbit        SPI_CS          = P3 ^ 5;   //片选择0   有效   
  24          
  25          /*
  26          sbit        SPI_REST        = P2^2;   //芯片重复位   
  27          sbit        SPI_WP          = P2^7;   //写保护0保护，不可写 , 
  28                                                //引脚在内部被拉高，可以悬空
  29          */
  30          
  31          /* ------------------------------------------------------------- spi base ----*/
  32          
  33          /* 读一字节 */
  34          static BYTE spiRead()                              
  35          {    
  36   1          BYTE i, rByte = 0;
  37   1              SPI_SO = 1;
  38   1                  
  39   1          for(i=0; i<8; i++) { 
  40   2              SPI_SCK = 1;  
  41   2              rByte = (rByte << 1) | SPI_SO;
  42   2              SPI_SCK = 0;
  43   2          }    
  44   1          return rByte;        
  45   1      }    
  46          
  47          /* 写一字节 */
  48          static void spiWrite(BYTE wByte) {    
  49   1          BYTE i;       
  50   1      
  51   1          for(i=0; i<8; i++) {  
  52   2              if(wByte & 0x80) SPI_SI = 1;   
  53   2              else SPI_SI = 0;
  54   2              SPI_SCK = 1;   
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 2   

  55   2              SPI_SCK = 0;
  56   2                      wByte <<= 1; 
  57   2          }   
  58   1      }
  59          
  60          /* ----------------------------------------- AT 45 api ---------------------- */
  61          
  62          /******************************************************************************/    
  63          /*Status Register Format:  状态记数器格式                                     */    
  64          /*   -----------------------------------------------------------------------  */    
  65          /*  |  bit7  |  bit6 | bit5| bit4| bit3| bit2| bit1| bit0|                    */    
  66          /*  |--------|-------|-----|-----|-----|-----|-----|-----|                    */    
  67          /*  |RDY/BUSY|  COMP | 0   | 1   | 1   | 1   | X   | X   |                    */    
  68          /*   -----------------------------------------------------------------------  */    
  69          /*  bit7 - 忙标记，0为忙1为不忙。                                             */    
  70          /*         当Status Register的位0移出之后，接下来的时钟脉冲序列将使SPI器件继续*/    
  71          /*         将最新的状态字节送出。                                             */    
  72          /*  bit6 - 标记最近一次Main Memory Page和Buffer的比较结果，0相同，1不同。     */    
  73          /******************************************************************************/    
  74          static BYTE at45ReadStatus() {
  75   1          BYTE i;   
  76   1           
  77   1          BEGIN_SPI;                                                
  78   1          spiWrite(0xD7);                                    
  79   1          i = spiRead();    
  80   1          OVER_SPI;    
  81   1          return i;        
  82   1      }
  83          
  84          static void at45waitReady() {
  85   1          BEGIN_SPI;                                      
  86   1          spiWrite(0xD7);
  87   1          for(;;) {                                            
  88   2              if (spiRead() & 0x80) break;    
  89   2          }
  90   1          OVER_SPI;
  91   1      }
  92          
  93          /**
  94           * addr &= 0x1FF 512
  95           * page &= 0x0FFF
  96           *
  97           * send:
  98           * 8bit cmd | 8bit page high | 8bit page low + addr high | 8bit addr low
  99           */
 100          static void at45WriteAddr(BYTE cmd, pAddress a) {
 101   1              spiWrite(cmd);
 102   1              spiWrite(DONT_CARE);
 103   1              spiWrite(a->a8.m8 & 1);
 104   1              spiWrite(a->a8.m0);
 105   1      }
 106          
 107          /** 
 108           * buffId is 0, buffer 1 else buffer 2
 109           */
 110          static void at45WriteBuff(bit buffId, pAddress a, BYTE dat) {
 111   1          BYTE cmd = buffId ? 0x84 : 0x87;
 112   1      
 113   1          BEGIN_SPI;
 114   1      
 115   1              at45WriteAddr(cmd, a);
 116   1          spiWrite(dat);
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 3   

 117   1      
 118   1          OVER_SPI;
 119   1      }
 120          
 121          static BYTE at45ReadBuff(bit buffId, pAddress a) {
 122   1          BYTE dat;
 123   1          BYTE cmd = buffId ? 0xD4 : 0xD6;
 124   1      
 125   1          BEGIN_SPI;
 126   1      
 127   1              at45WriteAddr(cmd, a);
 128   1              spiWrite(DONT_CARE);
 129   1          dat = spiRead();
 130   1      
 131   1          OVER_SPI;
 132   1          return dat;
 133   1      }
 134          
 135          static void at45writePage(BYTE cmd, pAddress a) {
 136   1              BYTE cy = a->a8.m8 & 0x80;
 137   1              BYTE l  = a->a8.m8 << 1;
 138   1              BYTE h  =(a->a8.m16<< 1) | cy;
 139   1              
 140   1              spiWrite(cmd);
 141   1              spiWrite(h);
 142   1              spiWrite(l);
 143   1              spiWrite(DONT_CARE); 
 144   1      }
 145          
 146          /* time: 20ms */
 147          static void at45Buff2Flash(bit buffId, pAddress a) {
 148   1          BYTE cmd = buffId ? 0x88 : 0x89;
 149   1      
 150   1          BEGIN_SPI;
 151   1              at45writePage(cmd, a);
 152   1          OVER_SPI; 
 153   1      }
 154          
 155          /* time: 250um */
 156          static void at45Flash2Buff(bit buffId, pAddress a) {
 157   1          BYTE cmd = buffId ? 0x53 : 0x55;
 158   1      
 159   1          BEGIN_SPI;
 160   1              at45writePage(cmd, a);
 161   1          OVER_SPI; 
 162   1      }
 163          
 164          /* time: 20ms */
 165          /* 芯片中的数据 1 可以编程为 0，反之不可，必须使用擦除把 0 还原为 1 */
 166          static void at45ErasePage(pAddress a) {
 167   1              BEGIN_SPI;
 168   1              at45writePage(0x81, a);
 169   1          OVER_SPI; 
 170   1      }
 171          
 172          /*----------------------------------------------------- smart drv ----------- */
 173          static bit cbuff_id = 0;    
 174          static bit cpage_modify = 0;
 175          static Address addr;
 176          
 177          
 178          #define PAGE_CHANGED(x)         ((addr.a8.m16 != x->a8.m16) && \
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 4   

 179                                                                  ((addr.a8.m8 & 0xFC) != (x->a8.m8 & 0xFC)) )
 180          
 181          
 182          static void _swap_page(pAddress a) {
 183   1          bit load_buff_id = !cbuff_id;
 184   1      
 185   1          // 把新的页面装入另一个缓冲
 186   1          at45waitReady();
 187   1          at45Flash2Buff(load_buff_id, a);
 188   1          at45waitReady();
 189   1          
 190   1          if (cpage_modify) {
 191   2              // 保存之前的缓冲到 flash
 192   2              at45ErasePage(&addr);
 193   2              at45waitReady();
 194   2              at45Buff2Flash(cbuff_id, &addr);  
 195   2              cpage_modify = 0;
 196   2          }
 197   1      
 198   1          cbuff_id = load_buff_id;
 199   1              addr.a32 = a->a32; 
 200   1      }
 201          
 202          
 203          static void _write(pAddress a, BYTE dat) {
 204   1          if (PAGE_CHANGED(a)) _swap_page(a);
 205   1          at45WriteBuff(cbuff_id, a, dat);
 206   1          cpage_modify = 1;
 207   1      }
 208          
 209          static BYTE _read(pAddress a) {
 210   1          BYTE dat;
 211   1      
 212   1          if (PAGE_CHANGED(a)) _swap_page(a);
 213   1          dat = at45ReadBuff(cbuff_id, a);
 214   1          return dat;
 215   1      }
 216          
 217          
 218          static void _init() {
 219   1              addr.a32 = 0;
 220   1          cbuff_id = 0;
 221   1          cpage_modify = 0;
 222   1      
 223   1          at45waitReady();
 224   1          at45Flash2Buff(cbuff_id, &addr);
 225   1          at45waitReady();
 226   1      }
 227          
 228          
 229          static void _flush() {
 230   1          at45waitReady();
 231   1          at45ErasePage(&addr);
 232   1          at45waitReady();
 233   1          at45Buff2Flash(cbuff_id, &addr);
 234   1      }                    
 235          
 236          
 237          #undef PAGE_CHANGED
 238          
 239          // 分页的方法错误 512=0x200，
 240          // 当前使用的地址移位 256为一个页，错误
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 5   

 241          void AT45DB161B(pFlashChip f) {
 242   1          f->read  = _read;
 243   1              f->write = _write;
 244   1              f->init  = _init;
 245   1          f->flush = _flush;
 246   1              f->mem_size = 0x200000;
 247   1      }
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0028 (BEGIN)
0000         L?0041:
0000         L?0042:
0000 900000      R     MOV     DPTR,#f
0003         L?0043:
0003 E0                MOVX    A,@DPTR
0004 FB                MOV     R3,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FA                MOV     R2,A
0008 A3                INC     DPTR
0009 E0                MOVX    A,@DPTR
000A F9                MOV     R1,A
000B 22                RET     
000C         L?0044:
000C         L?0045:
000C EB                MOV     A,R3
000D         L?0046:
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EA                MOV     A,R2
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E9                MOV     A,R1
0013 F0                MOVX    @DPTR,A
0014 22                RET     
0015         L?0047:
0015 120000      R     LCALL   at45waitReady
0018 A200        R     MOV     C,cbuff_id
001A 9200        R     MOV     ?at45Buff2Flash?BIT,C
001C 900000      R     MOV     DPTR,#?at45Buff2Flash?BYTE
001F EB                MOV     A,R3
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 EA                MOV     A,R2
0023 F0                MOVX    @DPTR,A
0024 A3                INC     DPTR
0025 E9                MOV     A,R1
0026 F0                MOVX    @DPTR,A
0027 22                RET     
0028         L?0048:
0028 900002            MOV     DPTR,#02H
002B 120000      E     LCALL   ?C?CLDOPTR
002E 54FC              ANL     A,#0FCH
0030 FF                MOV     R7,A
0031 900000      R     MOV     DPTR,#addr+02H
0034 E0                MOVX    A,@DPTR
0035 54FC              ANL     A,#0FCH
0037 6F                XRL     A,R7
0038 22                RET     
0039         L?0049:
0039 900001            MOV     DPTR,#01H
003C 120000      E     LCALL   ?C?CLDOPTR
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#addr+01H
0043 E0                MOVX    A,@DPTR
0044 6F                XRL     A,R7
0045 22                RET     
0046         L?0050:
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 7   

0046         L?0051:
0046 E0                MOVX    A,@DPTR
0047 F9                MOV     R1,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FA                MOV     R2,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D 22                RET     
             ; FUNCTION Com0028 (END)

             ; FUNCTION spiRead (BEGIN)
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
;---- Variable 'rByte' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 37
0002 D2EE              SETB    SPI_SO
                                           ; SOURCE LINE # 39
;---- Variable 'i' assigned to Register 'R6' ----
0004 FE                MOV     R6,A
0005         ?C0001:
                                           ; SOURCE LINE # 40
0005 D2B6              SETB    SPI_SCK
                                           ; SOURCE LINE # 41
0007 EF                MOV     A,R7
0008 25E0              ADD     A,ACC
000A FF                MOV     R7,A
000B A2EE              MOV     C,SPI_SO
000D E4                CLR     A
000E 33                RLC     A
000F 4F                ORL     A,R7
0010 FF                MOV     R7,A
                                           ; SOURCE LINE # 42
0011 C2B6              CLR     SPI_SCK
                                           ; SOURCE LINE # 43
0013 0E                INC     R6
0014 EE                MOV     A,R6
0015 B408ED            CJNE    A,#08H,?C0001
0018         ?C0002:
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 45
0018         ?C0004:
0018 22                RET     
             ; FUNCTION spiRead (END)

             ; FUNCTION L?0052 (BEGIN)
0000 C2B6              CLR     SPI_SCK
0002 C2B5              CLR     SPI_CS
0004 7FD7              MOV     R7,#0D7H
             ; FUNCTION _spiWrite (BEGIN)
                                           ; SOURCE LINE # 48
;---- Variable 'wByte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 51
;---- Variable 'i' assigned to Register 'R6' ----
0006 E4                CLR     A
0007 FE                MOV     R6,A
0008         ?C0005:
                                           ; SOURCE LINE # 52
0008 EF                MOV     A,R7
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 8   

0009 30E704            JNB     ACC.7,?C0008
000C D2EC              SETB    SPI_SI
000E 8002              SJMP    ?C0009
0010         ?C0008:
                                           ; SOURCE LINE # 53
0010 C2EC              CLR     SPI_SI
0012         ?C0009:
                                           ; SOURCE LINE # 54
0012 D2B6              SETB    SPI_SCK
                                           ; SOURCE LINE # 55
0014 C2B6              CLR     SPI_SCK
                                           ; SOURCE LINE # 56
0016 EF                MOV     A,R7
0017 25E0              ADD     A,ACC
0019 FF                MOV     R7,A
                                           ; SOURCE LINE # 57
001A 0E                INC     R6
001B EE                MOV     A,R6
001C B408E9            CJNE    A,#08H,?C0005
                                           ; SOURCE LINE # 58
001F         ?C0010:
001F 22                RET     
             ; FUNCTION _spiWrite (END)

             ; FUNCTION at45ReadStatus (BEGIN)
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
0000 120000      R     LCALL   L?0052
                                           ; SOURCE LINE # 79
0003 120000      R     LCALL   spiRead
;---- Variable 'i' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 80
0006 D2B5              SETB    SPI_CS
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 82
0008         ?C0011:
0008 22                RET     
             ; FUNCTION at45ReadStatus (END)

             ; FUNCTION at45waitReady (BEGIN)
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
0000 120000      R     LCALL   L?0052
                                           ; SOURCE LINE # 87
0003         ?C0012:
                                           ; SOURCE LINE # 88
0003 120000      R     LCALL   spiRead
0006 EF                MOV     A,R7
0007 30E7F9            JNB     ACC.7,?C0012
000A         ?C0013:
                                           ; SOURCE LINE # 90
000A D2B5              SETB    SPI_CS
                                           ; SOURCE LINE # 91
000C 22                RET     
             ; FUNCTION at45waitReady (END)

             ; FUNCTION _at45WriteAddr (BEGIN)
                                           ; SOURCE LINE # 100
;---- Variable 'a' assigned to Register 'R1/R2/R3' ----
;---- Variable 'cmd' assigned to Register 'R7' ----
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 9   

                                           ; SOURCE LINE # 101
0000 120000      R     LCALL   _spiWrite
                                           ; SOURCE LINE # 102
0003 E4                CLR     A
0004 FF                MOV     R7,A
0005 120000      R     LCALL   _spiWrite
                                           ; SOURCE LINE # 103
0008 900002            MOV     DPTR,#02H
000B 120000      E     LCALL   ?C?CLDOPTR
000E 5401              ANL     A,#01H
0010 FF                MOV     R7,A
0011 120000      R     LCALL   _spiWrite
                                           ; SOURCE LINE # 104
0014 900003            MOV     DPTR,#03H
0017 120000      E     LCALL   ?C?CLDOPTR
001A FF                MOV     R7,A
001B 020000      R     LJMP    _spiWrite
             ; FUNCTION _at45WriteAddr (END)

             ; FUNCTION at45WriteBuff (BEGIN)
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
0000 300004      R     JNB     buffId,?C0017
0003 7F84              MOV     R7,#084H
0005 8002              SJMP    ?C0018
0007         ?C0017:
0007 7F87              MOV     R7,#087H
0009         ?C0018:
;---- Variable 'cmd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 113
0009 C2B6              CLR     SPI_SCK
000B C2B5              CLR     SPI_CS
                                           ; SOURCE LINE # 115
000D 900000      R     MOV     DPTR,#a
0010 120000      R     LCALL   L?0043
0013 120000      R     LCALL   _at45WriteAddr
                                           ; SOURCE LINE # 116
0016 900000      R     MOV     DPTR,#dat
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 120000      R     LCALL   _spiWrite
                                           ; SOURCE LINE # 118
001E D2B5              SETB    SPI_CS
                                           ; SOURCE LINE # 119
0020 22                RET     
             ; FUNCTION at45WriteBuff (END)

             ; FUNCTION at45ReadBuff (BEGIN)
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 123
0000 300004      R     JNB     buffId,?C0020
0003 7FD4              MOV     R7,#0D4H
0005 8002              SJMP    ?C0021
0007         ?C0020:
0007 7FD6              MOV     R7,#0D6H
0009         ?C0021:
;---- Variable 'cmd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 125
0009 C2B6              CLR     SPI_SCK
000B C2B5              CLR     SPI_CS
                                           ; SOURCE LINE # 127
000D 900000      R     MOV     DPTR,#a
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 10  

0010 120000      R     LCALL   L?0043
0013 120000      R     LCALL   _at45WriteAddr
                                           ; SOURCE LINE # 128
0016 E4                CLR     A
0017 FF                MOV     R7,A
0018 120000      R     LCALL   _spiWrite
                                           ; SOURCE LINE # 129
001B 120000      R     LCALL   spiRead
;---- Variable 'dat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 131
001E D2B5              SETB    SPI_CS
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
0020         ?C0022:
0020 22                RET     
             ; FUNCTION at45ReadBuff (END)

             ; FUNCTION _at45writePage (BEGIN)
                                           ; SOURCE LINE # 135
;---- Variable 'a' assigned to Register 'R1/R2/R3' ----
;---- Variable 'cmd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 136
0000 900002            MOV     DPTR,#02H
0003 120000      E     LCALL   ?C?CLDOPTR
0006 FE                MOV     R6,A
0007 5480              ANL     A,#080H
0009 FD                MOV     R5,A
;---- Variable 'cy' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 137
000A EE                MOV     A,R6
000B 25E0              ADD     A,ACC
000D 900000      R     MOV     DPTR,#l
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
0011 900001            MOV     DPTR,#01H
0014 120000      E     LCALL   ?C?CLDOPTR
0017 FE                MOV     R6,A
0018 25E0              ADD     A,ACC
001A 4D                ORL     A,R5
;---- Variable 'h' assigned to Register 'R5' ----
001B FD                MOV     R5,A
                                           ; SOURCE LINE # 140
001C 120000      R     LCALL   _spiWrite
                                           ; SOURCE LINE # 141
001F AF05              MOV     R7,AR5
0021 120000      R     LCALL   _spiWrite
                                           ; SOURCE LINE # 142
0024 900000      R     MOV     DPTR,#l
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 120000      R     LCALL   _spiWrite
                                           ; SOURCE LINE # 143
002C E4                CLR     A
002D FF                MOV     R7,A
002E 020000      R     LJMP    _spiWrite
             ; FUNCTION _at45writePage (END)

             ; FUNCTION at45Buff2Flash (BEGIN)
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
0000 300004      R     JNB     buffId,?C0024
0003 7F88              MOV     R7,#088H
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 11  

0005 8002              SJMP    ?C0025
0007         ?C0024:
0007 7F89              MOV     R7,#089H
0009         ?C0025:
;---- Variable 'cmd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 150
0009 C2B6              CLR     SPI_SCK
000B C2B5              CLR     SPI_CS
                                           ; SOURCE LINE # 151
000D 900000      R     MOV     DPTR,#a
0010 120000      R     LCALL   L?0043
0013 120000      R     LCALL   _at45writePage
                                           ; SOURCE LINE # 152
0016 D2B5              SETB    SPI_CS
                                           ; SOURCE LINE # 153
0018 22                RET     
             ; FUNCTION at45Buff2Flash (END)

             ; FUNCTION at45Flash2Buff (BEGIN)
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
0000 300004      R     JNB     buffId,?C0027
0003 7F53              MOV     R7,#053H
0005 8002              SJMP    ?C0028
0007         ?C0027:
0007 7F55              MOV     R7,#055H
0009         ?C0028:
;---- Variable 'cmd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 159
0009 C2B6              CLR     SPI_SCK
000B C2B5              CLR     SPI_CS
                                           ; SOURCE LINE # 160
000D 900000      R     MOV     DPTR,#a
0010 120000      R     LCALL   L?0043
0013 120000      R     LCALL   _at45writePage
                                           ; SOURCE LINE # 161
0016 D2B5              SETB    SPI_CS
                                           ; SOURCE LINE # 162
0018 22                RET     
             ; FUNCTION at45Flash2Buff (END)

             ; FUNCTION _at45ErasePage (BEGIN)
                                           ; SOURCE LINE # 166
;---- Variable 'a' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 167
0000 C2B6              CLR     SPI_SCK
0002 C2B5              CLR     SPI_CS
                                           ; SOURCE LINE # 168
0004 7F81              MOV     R7,#081H
0006 120000      R     LCALL   _at45writePage
                                           ; SOURCE LINE # 169
0009 D2B5              SETB    SPI_CS
                                           ; SOURCE LINE # 170
000B 22                RET     
             ; FUNCTION _at45ErasePage (END)

             ; FUNCTION __swap_page (BEGIN)
                                           ; SOURCE LINE # 182
0000 900000      R     MOV     DPTR,#a
0003 120000      R     LCALL   L?0044
                                           ; SOURCE LINE # 183
0006 A200        R     MOV     C,cbuff_id
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 12  

0008 B3                CPL     C
0009 9200        R     MOV     load_buff_id,C
                                           ; SOURCE LINE # 186
000B 120000      R     LCALL   at45waitReady
                                           ; SOURCE LINE # 187
000E A200        R     MOV     C,load_buff_id
0010 9200        R     MOV     ?at45Flash2Buff?BIT,C
0012 900000      R     MOV     DPTR,#a
0015 120000      R     LCALL   L?0050
0018 900000      R     MOV     DPTR,#?at45Flash2Buff?BYTE
001B C9                XCH     A,R1
001C 120000      R     LCALL   L?0046
001F 120000      R     LCALL   at45Flash2Buff
                                           ; SOURCE LINE # 188
0022 120000      R     LCALL   at45waitReady
                                           ; SOURCE LINE # 190
0025 300011      R     JNB     cpage_modify,?C0031
                                           ; SOURCE LINE # 192
0028 7B01              MOV     R3,#01H
002A 7A00        R     MOV     R2,#HIGH addr
002C 7900        R     MOV     R1,#LOW addr
002E 120000      R     LCALL   _at45ErasePage
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
0031 120000      R     LCALL   L?0047
0034 120000      R     LCALL   at45Buff2Flash
                                           ; SOURCE LINE # 195
0037 C200        R     CLR     cpage_modify
                                           ; SOURCE LINE # 196
0039         ?C0031:
                                           ; SOURCE LINE # 198
0039 A200        R     MOV     C,load_buff_id
003B 9200        R     MOV     cbuff_id,C
                                           ; SOURCE LINE # 199
003D 900000      R     MOV     DPTR,#a
0040 120000      R     LCALL   L?0043
0043 120000      E     LCALL   ?C?LLDPTR
0046 900000      R     MOV     DPTR,#addr
0049 020000      E     LJMP    ?C?LSTXDATA
             ; FUNCTION __swap_page (END)

             ; FUNCTION __write (BEGIN)
                                           ; SOURCE LINE # 203
0000 900000      R     MOV     DPTR,#dat
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#a
0008 120000      R     LCALL   L?0044
                                           ; SOURCE LINE # 204
000B 120000      R     LCALL   L?0049
000E 600E              JZ      ?C0033
0010 900000      R     MOV     DPTR,#a
0013 120000      R     LCALL   L?0043
0016 120000      R     LCALL   L?0048
0019 6003              JZ      ?C0033
001B 120000      R     LCALL   __swap_page
001E         ?C0033:
                                           ; SOURCE LINE # 205
001E A200        R     MOV     C,cbuff_id
0020 9200        R     MOV     ?at45WriteBuff?BIT,C
0022 900000      R     MOV     DPTR,#a
0025 120000      R     LCALL   L?0050
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 13  

0028 900000      R     MOV     DPTR,#?at45WriteBuff?BYTE
002B C9                XCH     A,R1
002C 120000      R     LCALL   L?0046
002F 900000      R     MOV     DPTR,#dat
0032 E0                MOVX    A,@DPTR
0033 900000      R     MOV     DPTR,#?at45WriteBuff?BYTE+03H
0036 F0                MOVX    @DPTR,A
0037 120000      R     LCALL   at45WriteBuff
                                           ; SOURCE LINE # 206
003A D200        R     SETB    cpage_modify
                                           ; SOURCE LINE # 207
003C 22                RET     
             ; FUNCTION __write (END)

             ; FUNCTION __read (BEGIN)
                                           ; SOURCE LINE # 209
0000 900000      R     MOV     DPTR,#a
0003 120000      R     LCALL   L?0045
                                           ; SOURCE LINE # 212
0006 120000      R     LCALL   L?0049
0009 600E              JZ      ?C0035
000B 900000      R     MOV     DPTR,#a
000E 120000      R     LCALL   L?0043
0011 120000      R     LCALL   L?0048
0014 6003              JZ      ?C0035
0016 120000      R     LCALL   __swap_page
0019         ?C0035:
                                           ; SOURCE LINE # 213
0019 A200        R     MOV     C,cbuff_id
001B 9200        R     MOV     ?at45ReadBuff?BIT,C
001D 900000      R     MOV     DPTR,#a
0020 120000      R     LCALL   L?0051
0023 900000      R     MOV     DPTR,#?at45ReadBuff?BYTE
0026 C9                XCH     A,R1
0027 120000      R     LCALL   L?0046
002A 120000      R     LCALL   at45ReadBuff
;---- Variable 'dat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
002D         ?C0036:
002D 22                RET     
             ; FUNCTION __read (END)

             ; FUNCTION _init (BEGIN)
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0000 900000      R     MOV     DPTR,#addr
0003 120000      E     LCALL   ?C?LSTKXDATA
0006 00                DB      00H
0007 00                DB      00H
0008 00                DB      00H
0009 00                DB      00H
                                           ; SOURCE LINE # 220
000A C200        R     CLR     cbuff_id
                                           ; SOURCE LINE # 221
000C C200        R     CLR     cpage_modify
                                           ; SOURCE LINE # 223
000E 120000      R     LCALL   at45waitReady
                                           ; SOURCE LINE # 224
0011 A200        R     MOV     C,cbuff_id
0013 9200        R     MOV     ?at45Flash2Buff?BIT,C
0015 7A00        R     MOV     R2,#HIGH addr
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 14  

0017 7900        R     MOV     R1,#LOW addr
0019 900000      R     MOV     DPTR,#?at45Flash2Buff?BYTE
001C 7401              MOV     A,#01H
001E F0                MOVX    @DPTR,A
001F A3                INC     DPTR
0020 7400        R     MOV     A,#HIGH addr
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 7400        R     MOV     A,#LOW addr
0026 F0                MOVX    @DPTR,A
0027 120000      R     LCALL   at45Flash2Buff
                                           ; SOURCE LINE # 225
002A 020000      R     LJMP    at45waitReady
             ; FUNCTION _init (END)

             ; FUNCTION _flush (BEGIN)
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
0000 120000      R     LCALL   at45waitReady
                                           ; SOURCE LINE # 231
0003 7B01              MOV     R3,#01H
0005 7A00        R     MOV     R2,#HIGH addr
0007 7900        R     MOV     R1,#LOW addr
0009 120000      R     LCALL   _at45ErasePage
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
000C 120000      R     LCALL   L?0047
000F 020000      R     LJMP    at45Buff2Flash
             ; FUNCTION _flush (END)

             ; FUNCTION _AT45DB161B (BEGIN)
                                           ; SOURCE LINE # 241
0000 900000      R     MOV     DPTR,#f
0003 120000      R     LCALL   L?0045
                                           ; SOURCE LINE # 242
0006 7BFF              MOV     R3,#0FFH
0008 7A00        R     MOV     R2,#HIGH __read
000A 7900        R     MOV     R1,#LOW __read
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 120000      R     LCALL   L?0041
0015 120000      E     LCALL   ?C?PSTPTR
                                           ; SOURCE LINE # 243
0018 7BFF              MOV     R3,#0FFH
001A 7A00        R     MOV     R2,#HIGH __write
001C 7900        R     MOV     R1,#LOW __write
001E C003              PUSH    AR3
0020 C002              PUSH    AR2
0022 C001              PUSH    AR1
0024 120000      R     LCALL   L?0041
0027 900003            MOV     DPTR,#03H
002A 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 244
002D 7BFF              MOV     R3,#0FFH
002F 7A00        R     MOV     R2,#HIGH _init
0031 7900        R     MOV     R1,#LOW _init
0033 C003              PUSH    AR3
0035 C002              PUSH    AR2
0037 C001              PUSH    AR1
0039 120000      R     LCALL   L?0042
003C 900006            MOV     DPTR,#06H
C51 COMPILER V9.01   AT45DB161B                                                            06/30/2017 15:43:36 PAGE 15  

003F 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 245
0042 7BFF              MOV     R3,#0FFH
0044 7A00        R     MOV     R2,#HIGH _flush
0046 7900        R     MOV     R1,#LOW _flush
0048 C003              PUSH    AR3
004A C002              PUSH    AR2
004C C001              PUSH    AR1
004E 120000      R     LCALL   L?0042
0051 900009            MOV     DPTR,#09H
0054 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 246
0057 120000      R     LCALL   L?0042
005A 90000D            MOV     DPTR,#0DH
005D 120000      E     LCALL   ?C?LSTKOPTR
0060 00                DB      00H
0061 20                DB      020H
0062 00                DB      00H
0063 00                DB      00H
                                           ; SOURCE LINE # 247
0064 22                RET     
             ; FUNCTION _AT45DB161B (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    711    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       5
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
